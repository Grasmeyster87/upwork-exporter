//------------------------------------------------ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
let allCollectedJobs = [];
let currentParsingTabId = null;
let currentParsingFormat = 'json';
let initialUrl = ''; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ popup.js
    if (message.type === 'start-multi-page-extract') {
        currentParsingTabId = message.tabId;
        currentParsingFormat = message.format;

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç URL –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const urlObj = new URL(message.url);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä per_page
        urlObj.searchParams.set('per_page', '50');
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä page, —á—Ç–æ–±—ã initialUrl –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–ª—Å—è —Å —á–∏—Å—Ç–æ–π –±–∞–∑—ã
        urlObj.searchParams.delete('page');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        initialUrl = urlObj.toString();
        // Upwork –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å '&page=1' –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ—ç—Ç–æ–º—É –º—ã –±—É–¥–µ–º –µ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∞–º–∏,
        // —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å URL.
        // –ù–∞–ø—Ä–∏–º–µ—Ä, https://www.upwork.com/nx/search/jobs/?q=parsing%20scraping&sort=recency&t=1&per_page=50

        allCollectedJobs = []; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º

        // –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—è –µ–µ
        parsePage(1);
        sendResponse({ success: true, message: '–ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...' });
        return true;
    }

    // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏–∑ content.js)
    if (message.type === 'page-data-extracted') {
        const { jobs, totalPages, currentPage } = message;
        allCollectedJobs.push(...jobs);

        console.log(`[Background] –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: ${allCollectedJobs.length} –≤–∞–∫–∞–Ω—Å–∏–π.`);

        if (currentPage < totalPages) {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            parsePage(currentPage + 1);
        } else {
            // –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            processAllCollectedJobs(currentParsingFormat, allCollectedJobs);
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            allCollectedJobs = [];
            currentParsingTabId = null;
            initialUrl = '';
            // –§–æ–Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ popup,
            // –ø–æ—ç—Ç–æ–º—É popup –¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏
            // –º—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è popup (—Å–º. –Ω–∏–∂–µ).
        }
        sendResponse({ success: true }); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        return true; // –í–∞–∂–Ω–æ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    }

    // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Firebase, SQLite –∏–ª–∏ —Ñ–∞–π–ª) -
    //    –≠—Ç–æ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö.
    if (message.type === 'process') {
        const { format, jobs } = message;

        if (format === 'save-firebase') {
            fetch('http://localhost:3003/api/jobs/firebase', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(jobs)
            })
                .then(res => res.ok
                    ? sendResponse({ success: true, message: '‚úÖ –í–∞–∫–∞–Ω—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firebase' })
                    : sendResponse({ success: false, message: '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Firebase' }))
                .catch(err => sendResponse({ success: false, message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Firebase: ' + err.message }));
            return true;
        }

        if (format === 'save-db') {
            fetch('http://localhost:3003/api/jobs', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(jobs)
            })
                .then(res => res.ok
                    ? sendResponse({ success: true, message: '‚úÖ –í–∞–∫–∞–Ω—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ SQLite' })
                    : sendResponse({ success: false, message: '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ SQLite' }))
                .catch(err => sendResponse({ success: false, message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ SQLite: ' + err.message }));
            return true;
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª (JSON/CSV)
        try {
            const fileName = `upwork_jobs.${format}`;
            let blob;

            if (format === 'json') {
                blob = new Blob([JSON.stringify(jobs, null, 2)], { type: 'application/json' });
            } else { // CSV
                if (!jobs.length) {
                    sendResponse({ success: false, message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV.' });
                    return false;
                }
                const headers = Object.keys(jobs[0]);
                const csv = [headers.join(",")].concat(
                    jobs.map(row => headers.map(h => `"${(row[h] || "").replace(/"/g, '""')}"`).join(","))
                ).join("\n");
                blob = new Blob([csv], { type: 'text/csv' });
            }

            const reader = new FileReader();
            reader.onload = () => {
                chrome.downloads.download({
                    url: reader.result,
                    filename: fileName,
                    saveAs: true
                }, () => {
                    if (chrome.runtime.lastError) {
                        sendResponse({ success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + chrome.runtime.lastError.message });
                    } else {
                        sendResponse({ success: true, message: `üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ ${format.toUpperCase()}` });
                    }
                });
            };
            reader.readAsDataURL(blob);
            return true; // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
        } catch (err) {
            sendResponse({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + err.message });
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
async function processAllCollectedJobs(format, jobs) {
    if (jobs.length === 0) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º popup, —á—Ç–æ —Ä–∞–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        chrome.tabs.sendMessage(currentParsingTabId, {
            type: 'parsing-finished',
            success: false,
            message: '–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞.'
        }).catch(() => { }); // catch, –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞
        return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ–Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    // –∏–ª–∏ —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    chrome.runtime.sendMessage({ type: 'process', format, jobs }, response => {
        if (response.success) {
            console.log('[Background] Final processing successful:', response.message);
            // –£–≤–µ–¥–æ–º–ª—è–µ–º popup –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            chrome.tabs.sendMessage(currentParsingTabId, {
                type: 'parsing-finished',
                success: true,
                message: response.message
            }).catch(() => { });
        } else {
            console.error('[Background] Final processing failed:', response.message);
            // –£–≤–µ–¥–æ–º–ª—è–µ–º popup –æ–± –æ—à–∏–±–∫–µ
            chrome.tabs.sendMessage(currentParsingTabId, {
                type: 'parsing-finished',
                success: false,
                message: response.message
            }).catch(() => { });
        }
    });
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function parsePage(pageNum) {
    const urlObj = new URL(initialUrl);
    urlObj.searchParams.set('page', pageNum.toString());
    const targetUrl = urlObj.toString();
    console.log(`[Background] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${targetUrl}`);

    return new Promise((resolve, reject) => {
        const listener = (tabId, changeInfo, tab) => {
            console.log(`[Background] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ ${tabId}: ${changeInfo.status}, URL: ${tab.url}`);

            // --- –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –î–ï–ë–ê–ì –õ–û–ì–ò ---
            console.log(`[Background DEBUG] tabId: ${tabId}, currentParsingTabId: ${currentParsingTabId}`);
            console.log(`[Background DEBUG] changeInfo.status: ${changeInfo.status}, expected: 'complete'`);
            console.log(`[Background DEBUG] tab.url: ${tab.url}`);
            console.log(`[Background DEBUG] targetUrl: ${targetUrl}`);
            // console.log(`[Background DEBUG] URL startsWith match: ${tab.url.startsWith(targetUrl)}`); // –≠—Ç—É —Å—Ç—Ä–æ–∫—É –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é

            // --- –ù–û–í–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–õ–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò ---
            let normalizedTargetUrl = targetUrl;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤ targetUrl –µ—Å—Ç—å '+' –∏ tab.url –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '%20'
            // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± - –≤—Å–µ–≥–¥–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å URL –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º.
            if (normalizedTargetUrl.includes('+') && tab.url.includes('%20')) {
                normalizedTargetUrl = normalizedTargetUrl.replace(/\+/g, '%20');
            }
            console.log(`[Background DEBUG] Normalized targetUrl: ${normalizedTargetUrl}`);
            console.log(`[Background DEBUG] URL startsWith match (normalized): ${tab.url.startsWith(normalizedTargetUrl)}`);
            // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---


            // –ò–∑–º–µ–Ω–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º normalizedTargetUrl –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if (tabId === currentParsingTabId && changeInfo.status === 'complete' && tab.url.startsWith(normalizedTargetUrl)) {
                chrome.tabs.onUpdated.removeListener(listener);
                console.log(`[Background] –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${normalizedTargetUrl}.`); // –ò–∑–º–µ–Ω–∏–ª –∑–¥–µ—Å—å —Ç–æ–∂–µ
                console.log("[Background] –ü–ï–†–ï–î –í–´–ó–û–í–û–ú executeScript –ë–õ–û–ö–ê.");

                (async () => {
                    console.log("[Background] –í–ù–£–¢–†–ò executeScript –ë–õ–û–ö–ê.");
                    try {
                        console.log(`[Background] –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNum} —á–µ—Ä–µ–∑ content.js...`);
                        
                        // *** –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –£–î–ê–õ–ò–¢–ï –°–¢–†–û–ö–£ 'function: extractJobsFromPage' ***
                        const injectionResults = await chrome.scripting.executeScript({
                            target: { tabId: currentParsingTabId },
                            files: ['content.js'] // –û–°–¢–ê–í–¨–¢–ï –¢–û–õ–¨–ö–û –≠–¢–£ –°–¢–†–û–ö–£ –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ —Ñ–∞–π–ª–∞
                        });

                        // –ü–æ—Å–ª–µ –∏–Ω—ä–µ–∫—Ü–∏–∏ content.js, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
                        // –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: content.js –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!
                        const results = await chrome.tabs.sendMessage(currentParsingTabId, {
                            type: 'extract-data-from-page' // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π content.js –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å
                        });

                        // console.log("[Background] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ content.js:", results); // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–µ–±–∞–≥–∞

                        if (results && results.jobs && results.totalPages !== undefined) {
                            allCollectedJobs.push(...results.jobs);
                            totalPages = results.totalPages; // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

                            console.log(`[Background] –°–æ–±—Ä–∞–Ω–æ ${results.jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}. –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: ${allCollectedJobs.length}. –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${totalPages}`);

                            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                            if (pageNum < totalPages && pageNum < 5) { // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∞
                                console.log(`[Background] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${pageNum + 1} –∏–∑ ${totalPages}...`);
                                await parsePage(pageNum + 1, totalPages);
                            } else {
                                console.log("[Background] –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.");
                                console.log("[Background] –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π:", allCollectedJobs.length);
                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ popup.js
                                const finalMessage = await chrome.runtime.sendMessage({
                                    type: 'parsing-finished',
                                    success: true,
                                    message: `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–±—Ä–∞–Ω–æ ${allCollectedJobs.length} –≤–∞–∫–∞–Ω—Å–∏–π.`,
                                    jobs: allCollectedJobs, // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
                                    format: currentParsingFormat
                                });
                                // console.log("Final message response from popup:", finalMessage);
                                resolve();
                            }
                        } else {
                            console.error(`[Background] content.js –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è, –Ω–æ –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}. –†–µ–∑—É–ª—å—Ç–∞—Ç:`, results);
                            reject(new Error(`content.js –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}.`));
                        }

                    } catch (error) {
                        console.error(`[Background] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—ä–µ–∫—Ü–∏–∏/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ content.js –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}:`, error);
                        chrome.tabs.sendMessage(currentParsingTabId, {
                            type: 'parsing-finished',
                            success: false,
                            message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNum}: ${error.message}`
                        }).catch(() => { }); // catch –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ popup –∑–∞–∫—Ä—ã—Ç
                        reject(error);
                    }
                })(); // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            }
            // else if (tabId === currentParsingTabId && changeInfo.status === 'loading') {
            //     console.log(`[Background] –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNum} (—Å—Ç–∞—Ç—É—Å: loading)`);
            // }\
        };

        chrome.tabs.onUpdated.addListener(listener);
        chrome.tabs.update(currentParsingTabId, { url: targetUrl }).catch(err => {
            console.error("[Background] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏:", err);
            reject(err);
        });
    });
}